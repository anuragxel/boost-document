# Boost Document Library Build Jamfile
# Copyright 2015 Anurag Ghosh.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or www.boost.org/LICENSE_1_0.txt)

import modules ;
import path ;

# Searching `OO_SDK_OUT` in environmant variables
local OO_SDK_OUT = [ modules.peek : OO_SDK_OUT ] ;

# If not set, searching `OO_SDK_OUT` in user-config.jam
OO_SDK_OUT ?= [ modules.peek user-config : OO_SDK_OUT ] ;

# If not set, searching `OO_SDK_OUT` in site-config
OO_SDK_OUT ?= [ modules.peek site-config : OO_SDK_OUT ] ;


# We may check that OO_SDK_OUT is set
if ! ( $(OO_SDK_OUT) )
{
    echo "************************************************************" ;
    echo "Trying to build Boost.Document with OpenOffice/LibraOffice support." ;
    echo "If you need OpenOffice/LibraOffice you should specify the OO_SDK_OUT path." ;
    echo "You can specify them in site-config.jam, user-config.jam" ;
    echo "or in the environment." ;
    echo "For example:" ;
    echo "OO_SDK_OUT=C:\\Program Files\\ptw32\\Pre-built2\\include" ;
    echo "or by running `source /usr/lib/libreoffice/sdk/setsdkenv_unix.sh`" ;
    echo "************************************************************" ;
}

# extern libraries, could be found in specified directories
lib uno_cppuhelpergcc3 uno_cppu uno_salhelpergcc3 uno_sal
    :   # No source files after first `:` means that this is an extern library
    :
        # Portable way to specify library search paths
        <search>"$(OO_SDK_OUT)/lib"
        <search>"/usr/lib/libreoffice/ure-link/lib"
        <search>"/usr/lib/libreoffice/sdk/lib"
        # Telling bjam that those libraries exist only in shared version
        <link>shared
    ;

# extern libraries, could be found in specified directories
lib icppuhelper icppu isalhelper isal
    :   # No source files after first `:` means that this is an extern library
    :
        # Portable way to specify library search paths
        <search>"$(OO_SDK_OUT)\\lib"
        <search>"C:\\Program Files (x86)\\LibreOffice 4\\sdk\\lib"
        # Telling bjam that those libraries exist only in shared version
        <link>shared
    ;

# extern libraries, could be found in specified directories
lib Ole32 OleAut32
    :   # No source files after first `:` means that this is an extern library
    :
        # Portable way to specify library search paths
        <search>"C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um\\x64"
		<search>"C:\\Program Files (x86)\\Windows Kits\\8.0\\Lib\\win8\\um\\x86"
		<search>"C:\\Program Files (x86)\\Windows Kits\\8.1\\Lib\\winv6.3\\um\\x86"
		<search>"C:\\Program Files (x86)\\Windows Kits\\8.1\\Lib\\winv6.3\\um\\x64"
		<search>"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.1A\\Lib"
		<search>"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.1A\\Lib\\x64"
        # Telling bjam that those libraries exist only in shared version
        <link>shared
    ;

# All the flags and options for LibreOffice are stored in those variables
local LIBRE_DEFINES = <define>BOOST_DOCUMENT_HAS_LIBRE ;
local LIBRE_REQUIREMENTS =
        # Defining that we have LibreOffice
        $(LIBRE_DEFINES)

        # Portable way to specify include folders
        <target-os>linux:<include>"$(OO_SDK_OUT)/include"
        <target-os>linux:<include>"/usr/lib/libreoffice/sdk/include"

        <target-os>windows:<include>"$(OO_SDK_OUT)\\include"
        <target-os>windows:<include>"C:\\Program Files (x86)\\LibreOffice 4\\sdk\\include"

        # Linux specific defines for OpenOffice
        <target-os>linux:<define>UNX <define>GCC <define>LINUX <define>CPPU_ENV=gcc3 <define>HAVE_GCC_VISIBILITY_FEATURE

        # Disabling some of the GCC warnings that occur in OpenOffice/LibreOffice headers
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>gcc:<cxxflags>-Wno-variadic-macros
        <toolset>gcc:<cxxflags>-Wno-pedantic
        <toolset>gcc:<cxxflags>-Wall

        <toolset>clang:<cxxflags>-stdlib=libstdc++
        <toolset>clang:<cxxflags>-Wall
        # This makes boost/document depend and link with boost_system and boost_filesystem
        <library>/boost/system//boost_system
        <library>/boost/filesystem//boost_filesystem

        # This makes boost/document depend and link with extern libraries
        <target-os>linux:<library>uno_cppuhelpergcc3
        <target-os>linux:<library>uno_cppu
        <target-os>linux:<library>uno_salhelpergcc3
        <target-os>linux:<library>uno_sal

        <target-os>windows:<library>icppuhelper
        <target-os>windows:<library>icppu
        <target-os>windows:<library>isalhelper
        <target-os>windows:<library>isal
    ;

# Specific target to check OpenOffice avalability
exe has_libre_suit : ../build/has_libre_suit.cpp : $(LIBRE_REQUIREMENTS) ;
# Do not build that target without explicit request
explicit has_libre_suit ;

# All the flags and options for MS Office are stored in this variable
local MS_DEFINES = <define>BOOST_DOCUMENT_HAS_MS ;
local MS_REQUIREMENTS =
        # Defining that we have MS Office
        $(MS_DEFINES)

        <include>"C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um"
        <include>"C:\\Program Files (x86)\\Windows Kits\\8.0\\Include\\um"

        <library>Ole32
        <library>OleAut32

        <library>/boost/system//boost_system
        <library>/boost/filesystem//boost_filesystem

    ;

# Specific target to check MS avalability
exe has_ms_suit : ../build/has_ms_suit.cpp : $(MS_REQUIREMENTS) ;
# Do not build that target without explicit request
explicit has_ms_suit ;

project boost/document
    : source-location ../src
    : requirements
        [ check-target-builds ../build//has_libre_suit : $(LIBRE_REQUIREMENTS) ] # if we have has_oo_suit, then add $(LIBRE_REQUIREMENTS)
        [ check-target-builds ../build//has_ms_suit : $(MS_REQUIREMENTS) ] # if we have has_ms_suit, then add $(MS_REQUIREMENTS)
    : usage-requirements
        # <library> propagates dependency automatically, describing other requirements:
        <link>shared:<define>BOOST_ALL_DYN_LINK=1                       # tell source we're building dll's
        <link>static:<define>BOOST_All_STATIC_LINK=1                    # tell source we're building static lib's

        # We have some issues with the following code, that propogates defines to projects:
        #[ check-target-builds ../build//has_libre_suit : $(LIBRE_DEFINES) ]   # if we have has_oo_suit, then define BOOST_DOCUMENT_HAS_LIBRE
        #[ check-target-builds ../build//has_ms_suit : $(MS_DEFINES) ]   # if we have has_ms_suit, then define BOOST_DOCUMENT_HAS_MS
    ;

local SOURCES ;

#if ( $(MS_REQUIREMENTS) )
#{
#   SOURCES = detail/ms_api/ms_functions detail/ms_api/ms_sheet detail/open_instance ;
#}
#else if  ( $(LIBRE_REQUIREMENTS) )
#{
   SOURCES = detail/libre_api/libre_functions detail/libre_api/libre_sheet_func detail/libre_api/libre_cell_func detail/libre_api/libre_chart_func detail/open_instance ;
#}


lib boost_document
    :
        $(SOURCES).cpp
    ;
